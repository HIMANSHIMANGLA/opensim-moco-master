name: continuous-integration

# syntax https://help.github.com/en/articles/workflow-syntax-for-github-actions
on:
  pull_request:
    branches:
      - '*'
  push:
    branches: 
      - master
    tags:
      - '*'
    
jobs:
  windows:
    name: Windows

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v1

    - name: Install Doxygen
      # choco install doxygen.portable # <-- too unreliable.
      run: |
        (New-Object System.Net.WebClient).DownloadFile("https://sourceforge.net/projects/myosin/files/doxygen-1.8.14.windows.x64.bin.zip/download", "doxygen.zip")
        7z x $env:GITHUB_WORKSPACE/doxygen.zip -odoxygen
        echo "::add-path::$env:GITHUB_WORKSPACE\\doxygen"

    - name: Install NumPy 
      run: python -m pip install numpy
 
    - name: Install SWIG
      run: choco install swig --version 3.0.12 --yes --limit-output 
 
    - name: Update submodules
      run: git submodule update --init

    - name: Cache dependencies
      id: cache-dependencies
      uses: actions/cache@v1
      with:
        path: ~/moco_dependencies_install
        # TODO: avoid having to copy over the opensim-core commit hash into
        # dependencies/opensim-core.cmake.
        # Every time a cache is created, it's stored with this key.
        # In subsequent runs, if the key matches the key of an existing cache,
        # then the cache is used. We chose for this key to depend on the
        # operating system and a hash of the hashes of all files in the
        # dependencies directory (non-recursive).
        # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/caching-dependencies-to-speed-up-workflows#matching-a-cache-key
        key: ${{ runner.os }}-dependencies-${{ hashFiles('dependencies/*') }}

    - name: Build dependencies
      if: steps.cache-dependencies.outputs.cache-hit != 'true'
      run: |
        echo $env:GITHUB_WORKSPACE\\build_deps
        mkdir $env:GITHUB_WORKSPACE\\build_deps
        chdir $env:GITHUB_WORKSPACE\\build_deps
        # /W0 disables warnings. The other flags are copied from CMake's
        # default CMAKE_CXX_FLAGS.
        # https://msdn.microsoft.com/en-us/library/19z1t1wy.aspx
        $env:CXXFLAGS = "/W0"
        cmake $env:GITHUB_WORKSPACE/dependencies -G"Visual Studio 16 2019" -A x64 -DCMAKE_INSTALL_PREFIX=~/moco_dependencies_install -DOPENSIM_JAVA_WRAPPING=on -DOPENSIM_PYTHON_WRAPPING=on
        $env:CXXFLAGS = ""
        cmake . -LAH
        cmake --build . --config Release -- /maxcpucount:4 

    - name: Configure Moco
      id: configure-moco
      run: |
        mkdir $env:GITHUB_WORKSPACE\\build 
        chdir $env:GITHUB_WORKSPACE\\build        
        echo $env:PATH
        # TODO: Can remove /WX when we use that in CMakeLists.txt.
        $env:CXXFLAGS = "/WX"
        cmake $env:GITHUB_WORKSPACE -G"Visual Studio 16 2019" -A x64 -DCMAKE_INSTALL_PREFIX=~/opensim-moco -DMOCO_DEPENDENCIES_DIR=~/moco_dependencies_install -DMOCO_JAVA_BINDINGS=on -DMOCO_PYTHON_BINDINGS=on 
        $env:CXXFLAGS = ""
        cmake . -LAH
        $env:match = cmake -L . | Select-String -Pattern MOCO_FULL_VERSION
        $version = $env:match.split('=')[1]
        echo $version
        echo "::set-env name=VERSION::$version"
        echo "::set-output name=version::$VERSION"

    - name: Build Moco
      run: |
        chdir $env:GITHUB_WORKSPACE\\build        
        cmake --build . --config Release -- /maxcpucount:4 /verbosity:minimal
        
    - name: Test Moco
      run: |
        chdir $env:GITHUB_WORKSPACE\\build
        ctest --parallel 4 --output-on-failure --build-config Release

    - name: Install Moco
      run: |
        chdir $env:GITHUB_WORKSPACE\\build
        cmake --build . --config Release --target Moco_doxygen -- /maxcpucount:4 /verbosity:quiet
        cmake --build . --config Release --target install -- /maxcpucount:4 /verbosity:quiet

        chdir $env:GITHUB_WORKSPACE
        move ~/opensim-moco opensim-moco-$env:VERSION

    # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/contexts-and-expression-syntax-for-github-actions
    - name: Upload Moco
      uses: actions/upload-artifact@v1.0.0
      with:
        name: opensim-moco-${{ steps.configure-moco.outputs.version }}-win
        path: opensim-moco-${{ steps.configure-moco.outputs.version }}

    # TODO: Must be relative to the workspace?
    # - name: Upload Moco dependencies
    #   uses: actions/upload-artifact@v1.0.0
    #   with:
    #     name: opensim-moco-dependencies 
    #     path: moco_dependencies_install.zip
        
    # - name: Create release
    #   id: create-release
    #   uses: actions/create-release@v1.0.0
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ github.ref }}
    #     release_name: OpenSim Moco ${{ github.ref }}
    #     draft: true
    #     prerelease: false

    # - name: Zip Moco
    #   run: |
    #     7z a opensim-moco-$VERSION.zip opensim-moco-${VERSION}

    # - name: Upload release asset
    #   id: upload-release-asset 
    #   uses: actions/upload-release-asset@v1.0.1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create-release.outputs.upload_url }}
    #     asset_path: ./opensim-moco-${{ github.ref }}.zip
    #     asset_name: opensim-moco-${{ github.ref }}.zip
    #     asset_content_type: application/zip


  mac:
    name: Mac

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v1

    - name: Install Homebrew packages
      # Save the gfortran version to a file so we can use it in the cache key.
      run: |
        brew install cmake pkgconfig gcc autoconf libtool automake wget pcre doxygen
        pip3 install numpy
        gfortran -v
        mkdir gfortran_version
        gfortran -v &> gfortran_version/gfortran_version.txt

    - name: Cache SWIG
      id: cache-swig
      uses: actions/cache@v1
      with:
        path: ~/swig
        key: ${{ runner.os }}-swig

    - name: Install SWIG
      if: steps.cache-swig.outputs.cache-hit != 'true'
      run: |
        mkdir ~/swig-source && cd ~/swig-source
        wget https://github.com/swig/swig/archive/rel-3.0.12.tar.gz
        tar xzf rel-3.0.12.tar.gz && cd swig-rel-3.0.12
        sh autogen.sh && ./configure --prefix=$HOME/swig --disable-ccache
        make && make -j4 install

    - name: Update submodules
      run: git submodule update --init

    - name: Cache dependencies
      id: cache-dependencies
      uses: actions/cache@v1
      with:
        path: ~/moco_dependencies_install
        # TODO: avoid having to copy over the opensim-core commit hash.
        # If Homebrew updates the gcc package, then our cache of IPOPT is invalid.
        # Specifically, the pkgcfg_lib_IPOPT_gfortran CMake variable becomes
        # undefined.
        key: ${{ runner.os }}-dependencies-${{ hashFiles('dependencies/*') }}-${{ hashFiles('gfortran_version/*') }}
            
    - name: Build dependencies
      if: steps.cache-dependencies.outputs.cache-hit != 'true'
      run: |
        mkdir $GITHUB_WORKSPACE/build_deps
        cd $GITHUB_WORKSPACE/build_deps
        DEP_CMAKE_ARGS=($GITHUB_WORKSPACE/dependencies)
        DEP_CMAKE_ARGS+=(-DCMAKE_BUILD_TYPE=Release)
        DEP_CMAKE_ARGS+=(-DCMAKE_INSTALL_PREFIX=~/moco_dependencies_install)
        DEP_CMAKE_ARGS+=(-DOPENSIM_JAVA_WRAPPING=on -DOPENSIM_PYTHON_WRAPPING=on)
        DEP_CMAKE_ARGS+=(-DSWIG_EXECUTABLE=$HOME/swig/bin/swig)
        DEP_CMAKE_ARGS+=(-DCMAKE_OSX_DEPLOYMENT_TARGET=10.10)
        printf '%s\n' "${DEP_CMAKE_ARGS[@]}"
        cmake "${DEP_CMAKE_ARGS[@]}"
        cmake . -LAH
        make -j4 ipopt
        make -j4

    - name: Configure Moco
      id: configure-moco
      run: |
        mkdir $GITHUB_WORKSPACE/build
        cd $GITHUB_WORKSPACE/build
        MOCO_CMAKE_ARGS=($GITHUB_WORKSPACE)
        DEP_CMAKE_ARGS+=(-DCMAKE_BUILD_TYPE=Release)
        MOCO_CMAKE_ARGS+=(-DCMAKE_INSTALL_PREFIX=~/opensim-moco)
        MOCO_CMAKE_ARGS+=(-DMOCO_DEPENDENCIES_DIR=~/moco_dependencies_install)
        MOCO_CMAKE_ARGS+=(-DMOCO_JAVA_BINDINGS=on -DMOCO_PYTHON_BINDINGS=on)
        MOCO_CMAKE_ARGS+=(-DSWIG_EXECUTABLE=$HOME/swig/bin/swig)
        MOCO_CMAKE_ARGS+=(-DCMAKE_OSX_DEPLOYMENT_TARGET=10.10)
        printf '%s\n' "${MOCO_CMAKE_ARGS[@]}"
        cmake "${MOCO_CMAKE_ARGS[@]}"
        cmake . -LAH
        VERSION=`cmake -L . | grep MOCO_FULL_VERSION | cut -d "=" -f2`
        echo $VERSION
        echo "::set-env name=VERSION::$VERSION"
        echo "::set-output name=version::$VERSION"
        
    - name: Build Moco
      run: |
        cd $GITHUB_WORKSPACE/build
        make -j4
 
    - name: Test Moco
      run: |
        cd $GITHUB_WORKSPACE/build
        ctest -j4 --output-on-failure
 
    - name: Install Moco
      run: |
        cd $GITHUB_WORKSPACE/build
        make Moco_doxygen
        make -j4 install
        
        cd $GITHUB_WORKSPACE
        mv ~/opensim-moco opensim-moco-${VERSION}
        zip --symlinks --recurse-paths --quiet opensim-moco-$VERSION.zip opensim-moco-${VERSION}
 
    - name: Upload Moco
      uses: actions/upload-artifact@v1.0.0
      with:
        # The upload-artifact zipping does not preserve symlinks or executable
        # bits. So we zip ourslves, even though this causes a double-zip.
        name: opensim-moco-${{ steps.configure-moco.outputs.version }}-mac
        path: opensim-moco-${{ steps.configure-moco.outputs.version }}.zip

    # - name: Create release
    #   id: create-release
    #   uses: actions/create-release@v1.0.0
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ github.ref }}
    #     release_name: OpenSim Moco ${{ steps.configure-moco.outputs.version }}
    #     draft: true
    #     prerelease: false

    # - name: Zip Moco
    #   run: |
    #     zip --symlinks --recurse-paths --quiet opensim-moco-$VERSION.zip opensim-moco-${VERSION}

    # - name: Upload release asset
    #   id: upload-release-asset 
    #   uses: actions/upload-release-asset@v1.0.1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create-release.outputs.upload_url }}
    #     asset_path: ./opensim-moco-${{ steps.configure-moco.outputs.version }}.zip
    #     asset_name: opensim-moco-${{ steps.configure-moco.outputs.version }}.zip
    #     asset_content_type: application/zip



